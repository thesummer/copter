   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
  72               	.global	main
  74               	main:
  75               		.stabd	46,0,0
   1:main.c        **** /*
   2:main.c        **** * Hackaday.com AVR Tutorial firmware
   3:main.c        **** * written by: Mike Szczys (@szczys)
   4:main.c        **** * 10/24/2010
   5:main.c        **** *
   6:main.c        **** * ATtiny2313
   7:main.c        **** * Blinks one LED conneced to PD0
   8:main.c        **** *
   9:main.c        **** * http://hackaday.com/2010/10/25/avr-programming-02-the-hardware/
  10:main.c        **** */
  11:main.c        **** 
  12:main.c        **** #include <avr/io.h>
  13:main.c        **** #include <avr/interrupt.h>
  14:main.c        **** 
  15:main.c        **** int main(void)
  16:main.c        **** {
  77               	.LM0:
  78               	.LFBB1:
  79               	/* prologue: function */
  80               	/* frame size = 0 */
  81               	/* stack size = 0 */
  82               	.L__stack_usage = 0
  17:main.c        **** 
  18:main.c        ****   //Setup the clock
  19:main.c        ****   cli();			//Disable global interrupts
  84               	.LM1:
  85               	/* #APP */
  86               	 ;  19 "main.c" 1
  87 0000 F894      		cli
  88               	 ;  0 "" 2
  20:main.c        ****   TCCR1B |= 1<<CS11 | 1<<CS10;	//Divide by 64
  90               	.LM2:
  91               	/* #NOAPP */
  92 0002 8EB5      		in r24,78-32
  93 0004 8360      		ori r24,lo8(3)
  94 0006 8EBD      		out 78-32,r24
  21:main.c        ****   OCR1A = 15624;		//Count 15624 cycles for 1 second interrupt
  96               	.LM3:
  97 0008 88E0      		ldi r24,lo8(15624)
  98 000a 9DE3      		ldi r25,hi8(15624)
  99 000c 9BBD      		out 74+1-32,r25
 100 000e 8ABD      		out 74-32,r24
  22:main.c        ****   TCCR1B |= 1<<WGM12;		//Put Timer/Counter1 in CTC mode
 102               	.LM4:
 103 0010 8EB5      		in r24,78-32
 104 0012 8860      		ori r24,lo8(8)
 105 0014 8EBD      		out 78-32,r24
  23:main.c        ****   TIMSK |= 1<<OCIE1A;		//enable timer compare interrupt
 107               	.LM5:
 108 0016 89B7      		in r24,89-32
 109 0018 8064      		ori r24,lo8(64)
 110 001a 89BF      		out 89-32,r24
  24:main.c        ****   sei();			//Enable global interrupts
 112               	.LM6:
 113               	/* #APP */
 114               	 ;  24 "main.c" 1
 115 001c 7894      		sei
 116               	 ;  0 "" 2
  25:main.c        **** 
  26:main.c        ****   //Setup the I/O for the LED
  27:main.c        **** 
  28:main.c        ****   DDRD |= (1<<0);		//Set PortD Pin0 as an output
 118               	.LM7:
 119               	/* #NOAPP */
 120 001e 889A      		sbi 49-32,0
  29:main.c        ****   PORTD |= (1<<0);		//Set PortD Pin0 high to turn on LED
 122               	.LM8:
 123 0020 909A      		sbi 50-32,0
 124               	.L2:
 125 0022 00C0      		rjmp .L2
 127               	.Lscope1:
 129               		.stabd	78,0,0
 131               	.global	__vector_4
 133               	__vector_4:
 134               		.stabd	46,0,0
  30:main.c        **** 
  31:main.c        ****   while(1) { }			//Loop forever, interrupts do the rest
  32:main.c        **** }
  33:main.c        **** 
  34:main.c        **** ISR(TIMER1_COMPA_vect)		//Interrupt Service Routine
  35:main.c        **** {
 136               	.LM9:
 137               	.LFBB2:
 138 0024 1F92      		push __zero_reg__
 139 0026 0F92      		push r0
 140 0028 0FB6      		in r0,__SREG__
 141 002a 0F92      		push r0
 142 002c 1124      		clr __zero_reg__
 143 002e 8F93      		push r24
 144 0030 9F93      		push r25
 145               	/* prologue: Signal */
 146               	/* frame size = 0 */
 147               	/* stack size = 5 */
 148               	.L__stack_usage = 5
  36:main.c        ****   PORTD ^= (1<<0);		//Use xor to toggle the LED
 150               	.LM10:
 151 0032 82B3      		in r24,50-32
 152 0034 91E0      		ldi r25,lo8(1)
 153 0036 8927      		eor r24,r25
 154 0038 82BB      		out 50-32,r24
 155               	/* epilogue start */
  37:main.c        **** }
 157               	.LM11:
 158 003a 9F91      		pop r25
 159 003c 8F91      		pop r24
 160 003e 0F90      		pop r0
 161 0040 0FBE      		out __SREG__,r0
 162 0042 0F90      		pop r0
 163 0044 1F90      		pop __zero_reg__
 164 0046 1895      		reti
 166               	.Lscope2:
 168               		.stabd	78,0,0
 170               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc6pTqOk.s:2      *ABS*:0000003f __SREG__
     /tmp/cc6pTqOk.s:3      *ABS*:0000003e __SP_H__
     /tmp/cc6pTqOk.s:4      *ABS*:0000003d __SP_L__
     /tmp/cc6pTqOk.s:5      *ABS*:00000034 __CCP__
     /tmp/cc6pTqOk.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cc6pTqOk.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cc6pTqOk.s:74     .text:00000000 main
     /tmp/cc6pTqOk.s:133    .text:00000024 __vector_4

NO UNDEFINED SYMBOLS
