
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000a8c  00000000  00000000  000000d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000007a0  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__vector_4>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	25 c0       	rjmp	.+74     	; 0x7c <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:

int main(void)
{

  //Setup the clock
  cli();			//Disable global interrupts
  34:	f8 94       	cli
  TCCR1B |= 1<<CS11 | 1<<CS10;	//Divide by 64
  36:	8e b5       	in	r24, 0x2e	; 46
  38:	83 60       	ori	r24, 0x03	; 3
  3a:	8e bd       	out	0x2e, r24	; 46
  OCR1A = 15624;		//Count 15624 cycles for 1 second interrupt
  3c:	88 e0       	ldi	r24, 0x08	; 8
  3e:	9d e3       	ldi	r25, 0x3D	; 61
  40:	9b bd       	out	0x2b, r25	; 43
  42:	8a bd       	out	0x2a, r24	; 42
  TCCR1B |= 1<<WGM12;		//Put Timer/Counter1 in CTC mode
  44:	8e b5       	in	r24, 0x2e	; 46
  46:	88 60       	ori	r24, 0x08	; 8
  48:	8e bd       	out	0x2e, r24	; 46
  TIMSK |= 1<<OCIE1A;		//enable timer compare interrupt
  4a:	89 b7       	in	r24, 0x39	; 57
  4c:	80 64       	ori	r24, 0x40	; 64
  4e:	89 bf       	out	0x39, r24	; 57
  sei();			//Enable global interrupts
  50:	78 94       	sei

  //Setup the I/O for the LED

  DDRD |= (1<<0);		//Set PortD Pin0 as an output
  52:	88 9a       	sbi	0x11, 0	; 17
  PORTD |= (1<<0);		//Set PortD Pin0 high to turn on LED
  54:	90 9a       	sbi	0x12, 0	; 18
  56:	ff cf       	rjmp	.-2      	; 0x56 <__SREG__+0x17>

00000058 <__vector_4>:

  while(1) { }			//Loop forever, interrupts do the rest
}

ISR(TIMER1_COMPA_vect)		//Interrupt Service Routine
{
  58:	1f 92       	push	r1
  5a:	0f 92       	push	r0
  5c:	0f b6       	in	r0, 0x3f	; 63
  5e:	0f 92       	push	r0
  60:	11 24       	eor	r1, r1
  62:	8f 93       	push	r24
  64:	9f 93       	push	r25
  PORTD ^= (1<<0);		//Use xor to toggle the LED
  66:	82 b3       	in	r24, 0x12	; 18
  68:	91 e0       	ldi	r25, 0x01	; 1
  6a:	89 27       	eor	r24, r25
  6c:	82 bb       	out	0x12, r24	; 18
}
  6e:	9f 91       	pop	r25
  70:	8f 91       	pop	r24
  72:	0f 90       	pop	r0
  74:	0f be       	out	0x3f, r0	; 63
  76:	0f 90       	pop	r0
  78:	1f 90       	pop	r1
  7a:	18 95       	reti

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>
